name: build-android-app

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "master", "develop" ]

permissions:
  contents: read

jobs:
  build:
    timeout-minutes: 10
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: Setup Gradle
      uses: gradle/gradle-build-action@v3
    - name: initialize gradle
      run: gradle init
    - name: Create secret-file.txt from B64_SECRET1
      run: |
        $secretFile = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "app/smile_config.json";
        $encodedBytes = [System.Convert]::FromBase64String($env:SECRET_DATA1);
        Set-Content $secretFile -Value $encodedBytes -AsByteStream;
        $secretFileHash = Get-FileHash $secretFile;
        echo "SECRET_FILE=$secretFile" >> $GITHUB_ENV;
        echo "SECRET_FILE_HASH=$($secretFileHash.Hash)" >> $GITHUB_ENV;
      shell: pwsh
      env:
        SECRET_DATA1: ${{ secrets.B64_SECRET1 }}
    - name: "Get branch name and save to env"
      if: ${{ github.event_name == 'pull_request' }}
      run: |
          BRANCH_NAME="${GITHUB_HEAD_REF}"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
    - name: "Get branch name and save to env"
      if: ${{ github.event_name == 'push' }}
      run: |
          BRANCH_NAME="${GITHUB_REF##*/}"
          echo "BRANCH_NAME=${BRANCH_NAME}" >> $GITHUB_ENV
    - run: fastlane android deploy_beta
      env:
        SID_AWS_ACCESS_KEY_ID: ${{ secrets.SID_AWS_ACCESS_KEY_ID }}
        SID_AWS_SECRET_ACCESS_KEY: ${{ secrets.SID_AWS_SECRET_ACCESS_KEY }}
        SID_AWS_BUCKET: ${{ secrets.SID_AWS_BUCKET }}
        SID_AWS_REGION: ${{ secrets.SID_AWS_REGION }}
        SLACK_URL: ${{ secrets.SLACK_URL }}
    - name: Debug secret file path
      run: |
        Write-Host "SECRET_FILE is: $env:SECRET_FILE"
      shell: pwsh
      if: always()
    - name: Delete secret file
      run: |
        if (Test-Path -Path $env:SECRET_FILE) {
          Remove-Item -Path $env:SECRET_FILE;
        } else {
          Write-Host "SECRET_FILE environment variable is not set or points to a non-existent file.";
        }
      shell: pwsh
      if: always()
      env:
        SECRET_FILE: ${{ env.SECRET_FILE }}
